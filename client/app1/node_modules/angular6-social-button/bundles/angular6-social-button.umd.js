(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('angular6-social-button', ['exports', '@angular/core', 'rxjs', '@angular/platform-browser'], factory) :
    (factory((global['angular6-social-button'] = {}),global.ng.core,global.rxjs,global.ng.platformBrowser));
}(this, (function (exports,i0,rxjs,platformBrowser) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ BaseLoginProviderImpl = (function () {
        function BaseLoginProviderImpl() {
        }
        /**
         * @param {?} obj
         * @param {?} onload
         * @return {?}
         */
        BaseLoginProviderImpl.prototype.loadScript = /**
         * @param {?} obj
         * @param {?} onload
         * @return {?}
         */
            function (obj, onload) {
                if (document.getElementById(obj.name)) {
                    return;
                }
                /** @type {?} */
                var signInJS = document.createElement('script');
                signInJS.async = true;
                signInJS.src = obj.url;
                signInJS.onload = onload;
                if (obj.name === 'linkedin') {
                    signInJS.async = false;
                    signInJS.text = ('api_key: ' + obj.id).replace('\'', '');
                }
                document.head.appendChild(signInJS);
            };
        return BaseLoginProviderImpl;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SocialUser = (function () {
        function SocialUser() {
        }
        return SocialUser;
    }());
    var LoginProviderClass = (function () {
        function LoginProviderClass() {
        }
        return LoginProviderClass;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FacebookLoginProvider = (function (_super) {
        __extends(FacebookLoginProvider, _super);
        function FacebookLoginProvider(clientId) {
            var _this = _super.call(this) || this;
            _this.clientId = clientId;
            _this.TYPE = 'facebook';
            _this.loginProviderObj = new LoginProviderClass();
            _this.loginProviderObj.id = clientId;
            _this.loginProviderObj.name = 'facebook';
            _this.loginProviderObj.url = 'https://connect.facebook.net/en_US/sdk.js';
            return _this;
        }
        /**
         * @return {?}
         */
        FacebookLoginProvider.prototype.initialize = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    _this.loadScript(_this.loginProviderObj, function () {
                        FB.init({
                            appId: _this.clientId,
                            autoLogAppEvents: true,
                            cookie: true,
                            xfbml: true,
                            version: 'v2.8'
                        });
                        FB.AppEvents.logPageView();
                        FB.getLoginStatus(function (response) {
                            if (response.status === 'connected') {
                                /** @type {?} */
                                var accessToken_1 = FB.getAuthResponse()['accessToken'];
                                FB.api('/me?fields=name,email,picture', function (res) {
                                    resolve(FacebookLoginProvider.drawUser(Object.assign({}, { token: accessToken_1 }, res)));
                                });
                            }
                        });
                    });
                });
            };
        /**
         * @param {?} response
         * @return {?}
         */
        FacebookLoginProvider.drawUser = /**
         * @param {?} response
         * @return {?}
         */
            function (response) {
                /** @type {?} */
                var user = new SocialUser();
                user.id = response.id;
                user.name = response.name;
                user.email = response.email;
                user.accessToken = response.accessToken;
                user.image = 'https://graph.facebook.com/' + response.id + '/picture?type=normal';
                return user;
            };
        /**
         * @param {?=} scopes
         * @return {?}
         */
        FacebookLoginProvider.prototype.signIn = /**
         * @param {?=} scopes
         * @return {?}
         */
            function (scopes) {
                return new Promise(function (resolve, reject) {
                    FB.login(function (response) {
                        console.log("facebook", response);
                        if (response.authResponse) {
                            /** @type {?} */
                            var accessToken_2 = FB.getAuthResponse()['accessToken'];
                            FB.api('/me?fields=name,email,picture', function (res) {
                                console.log("me", res);
                                resolve(FacebookLoginProvider.drawUser(Object.assign({}, { accessToken: accessToken_2 }, res)));
                            });
                        }
                    }, { scope: scopes && scopes.length > 0 ? scopes.join(',') : 'email,public_profile' });
                });
            };
        /**
         * @param {?=} share
         * @return {?}
         */
        FacebookLoginProvider.prototype.sharing = /**
         * @param {?=} share
         * @return {?}
         */
            function (share) {
                return new Promise(function (resolve, reject) {
                    console.log("sharing", share);
                    FB.ui({
                        method: 'share',
                        href: share.href,
                        hashtag: (share.hashtag && share.hashtag.indexOf('#') >= 0) ? share.hashtag : null
                    }, function (response) {
                        console.log(response);
                    });
                });
            };
        /**
         * @return {?}
         */
        FacebookLoginProvider.prototype.signOut = /**
         * @return {?}
         */
            function () {
                return new Promise(function (resolve, reject) {
                    FB.logout(function (response) {
                        resolve();
                    });
                });
            };
        FacebookLoginProvider.PROVIDER_TYPE = 'facebook';
        FacebookLoginProvider.SCOPES = {
            EMAIL: 'email',
            PUBLIC_PROFILE: 'public_profile'
        };
        return FacebookLoginProvider;
    }(BaseLoginProviderImpl));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var GoogleLoginProvider = (function (_super) {
        __extends(GoogleLoginProvider, _super);
        function GoogleLoginProvider(clientId) {
            var _this = _super.call(this) || this;
            _this.clientId = clientId;
            _this.loginProviderObj = new LoginProviderClass();
            _this.TYPE = 'google';
            _this.loginProviderObj.id = clientId;
            _this.loginProviderObj.name = 'google';
            _this.loginProviderObj.url = 'https://apis.google.com/js/platform.js';
            return _this;
        }
        /**
         * @return {?}
         */
        GoogleLoginProvider.prototype.initialize = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    _this.loadScript(_this.loginProviderObj, function () {
                        gapi.load('auth2', function () {
                            _this.auth2 = gapi.auth2.init({
                                client_id: _this.clientId,
                                scope: 'email'
                            });
                            _this.auth2.then(function () {
                                if (_this.auth2.isSignedIn.get()) {
                                    resolve(_this.drawUser());
                                }
                            });
                        });
                    });
                });
            };
        /**
         * @return {?}
         */
        GoogleLoginProvider.prototype.drawUser = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var user = new SocialUser();
                /** @type {?} */
                var profile = this.auth2.currentUser.get().getBasicProfile();
                /** @type {?} */
                var authResponseObj = this.auth2.currentUser.get().getAuthResponse(true);
                user.id = profile.getId();
                user.name = profile.getName();
                user.email = profile.getEmail();
                user.image = profile.getImageUrl();
                user.accessToken = authResponseObj.access_token;
                user.idToken = authResponseObj.id_token;
                return user;
            };
        /**
         * @param {?=} scopes
         * @return {?}
         */
        GoogleLoginProvider.prototype.signIn = /**
         * @param {?=} scopes
         * @return {?}
         */
            function (scopes) {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    /** @type {?} */
                    var promise = _this.auth2.signIn();
                    promise.then(function () {
                        resolve(_this.drawUser());
                    }).catch(function (err) {
                        reject(err);
                    });
                });
            };
        /**
         * @return {?}
         */
        GoogleLoginProvider.prototype.signOut = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    _this.auth2.signOut().then(function (err) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve();
                        }
                    });
                });
            };
        /**
         * @param {?=} share
         * @return {?}
         */
        GoogleLoginProvider.prototype.sharing = /**
         * @param {?=} share
         * @return {?}
         */
            function (share) {
                return new Promise(function (resolve, reject) {
                    resolve();
                });
            };
        GoogleLoginProvider.PROVIDER_TYPE = 'google';
        return GoogleLoginProvider;
    }(BaseLoginProviderImpl));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SocialServiceConfig = (function () {
        function SocialServiceConfig(providers) {
            this.providers = new Map();
            if (providers) {
                for (var i = 0; i < providers.length; i++) {
                    /** @type {?} */
                    var element = providers[i];
                    this.providers.set(element.provider.TYPE, element.provider);
                }
            }
        }
        /**
         * @return {?}
         */
        SocialServiceConfig.prototype.getProviders = /**
         * @return {?}
         */
            function () {
                return this.providers;
            };
        /**
         * @param {?} provider
         * @return {?}
         */
        SocialServiceConfig.prototype.addProvider = /**
         * @param {?} provider
         * @return {?}
         */
            function (provider) {
                if (!this.providers.get(provider.TYPE)) {
                    this.providers.set(provider.TYPE, provider);
                }
            };
        /**
         * @param {?} clientId
         * @return {?}
         */
        SocialServiceConfig.prototype.addFacebook = /**
         * @param {?} clientId
         * @return {?}
         */
            function (clientId) {
                this.addProvider(new FacebookLoginProvider(clientId));
                return this;
            };
        /**
         * @param {?} clientId
         * @return {?}
         */
        SocialServiceConfig.prototype.addGoogle = /**
         * @param {?} clientId
         * @return {?}
         */
            function (clientId) {
                this.addProvider(new GoogleLoginProvider(clientId));
                return this;
            };
        return SocialServiceConfig;
    }());
    var SocialService = (function () {
        function SocialService(config) {
            var _this = this;
            this._user = null;
            this._authState = new rxjs.BehaviorSubject(null);
            this.providers = config.getProviders();
            this.providers.forEach(function (provider, key) {
                provider.initialize().then(function (user) {
                    user.provider = key;
                    _this._user = user;
                    _this._authState.next(user);
                }).catch(function (err) {
                    // this._authState.next(null);
                });
            });
        }
        Object.defineProperty(SocialService.prototype, "authState", {
            get: /**
             * @return {?}
             */ function () {
                return this._authState.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        SocialService.prototype.isSocialLoggedIn = /**
         * @return {?}
         */
            function () {
                console.log(this._user);
                return (this._user != null);
            };
        /**
         * @param {?=} share
         * @return {?}
         */
        SocialService.prototype.facebookSharing = /**
         * @param {?=} share
         * @return {?}
         */
            function (share) {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    /** @type {?} */
                    var providerObject = _this.providers.get('facebook');
                    if (providerObject) {
                        providerObject.sharing(share).then(function () {
                            resolve(true);
                        });
                    }
                    else {
                        reject(SocialService.LOGIN_PROVIDER_NOT_FOUND);
                    }
                });
            };
        /**
         * @param {?} providerType
         * @param {?=} scopes
         * @return {?}
         */
        SocialService.prototype.signIn = /**
         * @param {?} providerType
         * @param {?=} scopes
         * @return {?}
         */
            function (providerType, scopes) {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    /** @type {?} */
                    var providerObject = _this.providers.get(providerType);
                    if (providerObject) {
                        providerObject.signIn(scopes).then(function (user) {
                            user.provider = providerType;
                            resolve(user);
                            _this._user = user;
                            _this._authState.next(user);
                        }).catch(function (err) {
                            reject(SocialService.USER_POPUP_CLOSE);
                        });
                    }
                    else {
                        reject(SocialService.LOGIN_PROVIDER_NOT_FOUND);
                    }
                });
            };
        /**
         * @return {?}
         */
        SocialService.prototype.signOut = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    if (_this._user && _this._user.provider) {
                        /** @type {?} */
                        var providerType = _this._user.provider;
                        /** @type {?} */
                        var providerObject = _this.providers.get(providerType);
                        providerObject.signOut().then(function () {
                            _this._user = null;
                            _this._authState.next(null);
                            resolve();
                        }).catch(function (err) {
                            _this._authState.next(null);
                        });
                    }
                    else {
                        reject(SocialService.LOGIN_PROVIDER_NOT_FOUND);
                    }
                });
            };
        SocialService.LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';
        SocialService.USER_POPUP_CLOSE = 'User close the popup';
        SocialService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        SocialService.ctorParameters = function () {
            return [
                { type: SocialServiceConfig }
            ];
        };
        /** @nocollapse */ SocialService.ngInjectableDef = i0.defineInjectable({ factory: function SocialService_Factory() { return new SocialService(i0.inject(SocialServiceConfig)); }, token: SocialService, providedIn: "root" });
        return SocialService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FacebookLoginButton = (function () {
        function FacebookLoginButton(socialAuthService) {
            this.socialAuthService = socialAuthService;
            this.socialUser = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        FacebookLoginButton.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        FacebookLoginButton.prototype.socialSignIn = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.socialAuthService.signIn('facebook', this.scopes).then(function (userData) {
                    console.log("socialSignIn", userData);
                    _this.socialUser.emit(userData);
                }).catch(function () {
                    _this.socialUser.emit(null);
                });
            };
        FacebookLoginButton.decorators = [
            { type: i0.Component, args: [{
                        selector: 'facebook-login-button',
                        template: "\n      <button class=\"button btn-block loginBtn --facebook\" \n              (click)=\"socialSignIn()\" type=\"button\">\n          Login with Facebook</button>\n  ",
                        styles: [".button{font-family:Lato,\"Lucida Grande\",\"Lucida Sans Unicode\",Tahoma,Sans-Serif;-webkit-appearance:none;display:inline-block;outline:0;border-radius:3px;border:3px solid transparent;cursor:pointer;text-overflow:ellipsis;text-decoration:none!important;font-weight:400!important}.loginBtn{box-sizing:border-box;position:relative;margin:.2em;padding:0 15px 0 46px;border:none;text-align:left;line-height:34px;white-space:nowrap;border-radius:3px;font-size:16px;color:#fff}.loginBtn:before{content:\"\";box-sizing:border-box;position:absolute;top:0;left:0;width:34px;height:100%}.loginBtn:focus{outline:0}.loginBtn:active{box-shadow:inset 0 0 0 32px rgba(0,0,0,.1)}.shareBtn{box-sizing:border-box;position:relative;margin:.2em;padding:0 15px 0 46px;border:none;text-align:left;line-height:34px;white-space:nowrap;border-radius:3px;font-size:16px;color:#fff}.shareBtn:before{content:\"\";box-sizing:border-box;position:absolute;top:0;left:0;width:34px;height:100%}.shareBtn:focus{outline:0}.shareBtn:active{box-shadow:inset 0 0 0 32px rgba(0,0,0,.1)}.--facebook{background-color:#4c69ba;background-image:linear-gradient(#4c69ba,#3b55a0);text-shadow:0 -1px 0 #354c8c}.--facebook:before{border-right:1px solid #364e92;background:url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/14082/icon_facebook.png) 6px 6px no-repeat}.--facebook:focus,.--facebook:hover{background-color:#5b7bd5;background-image:linear-gradient(#5b7bd5,#4864b1)}.--google{background:#dd4b39}.--google:before{border-right:1px solid #bb3f30;background:url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/14082/icon_google.png) 6px 6px no-repeat}.--google:focus,.--google:hover{background:#e74b37}"],
                    },] },
        ];
        /** @nocollapse */
        FacebookLoginButton.ctorParameters = function () {
            return [
                { type: SocialService }
            ];
        };
        FacebookLoginButton.propDecorators = {
            size: [{ type: i0.Input }],
            scopes: [{ type: i0.Input }],
            socialUser: [{ type: i0.Output }]
        };
        return FacebookLoginButton;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var GoogleLoginButton = (function () {
        function GoogleLoginButton(socialAuthService) {
            this.socialAuthService = socialAuthService;
            this.socialUser = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        GoogleLoginButton.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        GoogleLoginButton.prototype.socialSignIn = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.socialAuthService.signIn('google', this.scopes).then(function (userData) {
                    _this.socialUser.emit(userData);
                }).catch(function () {
                    _this.socialUser.emit(null);
                });
            };
        GoogleLoginButton.decorators = [
            { type: i0.Component, args: [{
                        selector: 'google-login-button',
                        template: "\n      <button class=\"btn-block loginBtn --google\" \n              (click)=\"socialSignIn()\" type=\"button\">\n          Login with Google\n      </button>\n  ", styles: [".button{font-family:Lato,\"Lucida Grande\",\"Lucida Sans Unicode\",Tahoma,Sans-Serif;-webkit-appearance:none;display:inline-block;outline:0;border-radius:3px;border:3px solid transparent;cursor:pointer;text-overflow:ellipsis;text-decoration:none!important;font-weight:400!important}.loginBtn{box-sizing:border-box;position:relative;margin:.2em;padding:0 15px 0 46px;border:none;text-align:left;line-height:34px;white-space:nowrap;border-radius:3px;font-size:16px;color:#fff}.loginBtn:before{content:\"\";box-sizing:border-box;position:absolute;top:0;left:0;width:34px;height:100%}.loginBtn:focus{outline:0}.loginBtn:active{box-shadow:inset 0 0 0 32px rgba(0,0,0,.1)}.shareBtn{box-sizing:border-box;position:relative;margin:.2em;padding:0 15px 0 46px;border:none;text-align:left;line-height:34px;white-space:nowrap;border-radius:3px;font-size:16px;color:#fff}.shareBtn:before{content:\"\";box-sizing:border-box;position:absolute;top:0;left:0;width:34px;height:100%}.shareBtn:focus{outline:0}.shareBtn:active{box-shadow:inset 0 0 0 32px rgba(0,0,0,.1)}.--facebook{background-color:#4c69ba;background-image:linear-gradient(#4c69ba,#3b55a0);text-shadow:0 -1px 0 #354c8c}.--facebook:before{border-right:1px solid #364e92;background:url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/14082/icon_facebook.png) 6px 6px no-repeat}.--facebook:focus,.--facebook:hover{background-color:#5b7bd5;background-image:linear-gradient(#5b7bd5,#4864b1)}.--google{background:#dd4b39}.--google:before{border-right:1px solid #bb3f30;background:url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/14082/icon_google.png) 6px 6px no-repeat}.--google:focus,.--google:hover{background:#e74b37}"],
                    },] },
        ];
        /** @nocollapse */
        GoogleLoginButton.ctorParameters = function () {
            return [
                { type: SocialService }
            ];
        };
        GoogleLoginButton.propDecorators = {
            size: [{ type: i0.Input }],
            scopes: [{ type: i0.Input }],
            socialUser: [{ type: i0.Output }]
        };
        return GoogleLoginButton;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FacebookSharingButton = (function () {
        function FacebookSharingButton(socialAuthService, document) {
            this.socialAuthService = socialAuthService;
            this.document = document;
            this.share = null;
            this.response = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        FacebookSharingButton.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        FacebookSharingButton.prototype.sharing = /**
         * @return {?}
         */
            function () {
                var _this = this;
                console.log(this.document.location.href);
                if (!this.share) {
                    this.share = { href: this.document.location.href };
                }
                else if (!this.share.href) {
                    this.share.href = this.document.location.href;
                }
                this.socialAuthService.facebookSharing(this.share).then(function () {
                    _this.response.emit(true);
                }).catch(function (err) {
                    _this.response.emit(false);
                });
            };
        FacebookSharingButton.decorators = [
            { type: i0.Component, args: [{
                        selector: 'facebook-share-button',
                        template: "\n      <button class=\"button btn-block loginBtn --facebook\" \n              (click)=\"sharing()\" type=\"button\">Share</button>\n  ",
                        styles: [".button{font-family:Lato,\"Lucida Grande\",\"Lucida Sans Unicode\",Tahoma,Sans-Serif;-webkit-appearance:none;display:inline-block;outline:0;border-radius:3px;border:3px solid transparent;cursor:pointer;text-overflow:ellipsis;text-decoration:none!important;font-weight:400!important}.loginBtn{box-sizing:border-box;position:relative;margin:.2em;padding:0 15px 0 46px;border:none;text-align:left;line-height:34px;white-space:nowrap;border-radius:3px;font-size:16px;color:#fff}.loginBtn:before{content:\"\";box-sizing:border-box;position:absolute;top:0;left:0;width:34px;height:100%}.loginBtn:focus{outline:0}.loginBtn:active{box-shadow:inset 0 0 0 32px rgba(0,0,0,.1)}.shareBtn{box-sizing:border-box;position:relative;margin:.2em;padding:0 15px 0 46px;border:none;text-align:left;line-height:34px;white-space:nowrap;border-radius:3px;font-size:16px;color:#fff}.shareBtn:before{content:\"\";box-sizing:border-box;position:absolute;top:0;left:0;width:34px;height:100%}.shareBtn:focus{outline:0}.shareBtn:active{box-shadow:inset 0 0 0 32px rgba(0,0,0,.1)}.--facebook{background-color:#4c69ba;background-image:linear-gradient(#4c69ba,#3b55a0);text-shadow:0 -1px 0 #354c8c}.--facebook:before{border-right:1px solid #364e92;background:url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/14082/icon_facebook.png) 6px 6px no-repeat}.--facebook:focus,.--facebook:hover{background-color:#5b7bd5;background-image:linear-gradient(#5b7bd5,#4864b1)}.--google{background:#dd4b39}.--google:before{border-right:1px solid #bb3f30;background:url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/14082/icon_google.png) 6px 6px no-repeat}.--google:focus,.--google:hover{background:#e74b37}"],
                    },] },
        ];
        /** @nocollapse */
        FacebookSharingButton.ctorParameters = function () {
            return [
                { type: SocialService },
                { type: undefined, decorators: [{ type: i0.Inject, args: [platformBrowser.DOCUMENT,] }] }
            ];
        };
        FacebookSharingButton.propDecorators = {
            share: [{ type: i0.Input }],
            response: [{ type: i0.Output }]
        };
        return FacebookSharingButton;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var Angular6SocialButtonModule = (function () {
        function Angular6SocialButtonModule() {
        }
        Angular6SocialButtonModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [],
                        declarations: [FacebookLoginButton, GoogleLoginButton, FacebookSharingButton],
                        exports: [FacebookLoginButton, GoogleLoginButton, FacebookSharingButton]
                    },] },
        ];
        return Angular6SocialButtonModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.SocialServiceConfig = SocialServiceConfig;
    exports.SocialService = SocialService;
    exports.FacebookLoginProvider = FacebookLoginProvider;
    exports.GoogleLoginProvider = GoogleLoginProvider;
    exports.FacebookLoginButton = FacebookLoginButton;
    exports.GoogleLoginButton = GoogleLoginButton;
    exports.FacebookSharingButton = FacebookSharingButton;
    exports.Angular6SocialButtonModule = Angular6SocialButtonModule;
    exports.ɵa = BaseLoginProviderImpl;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,