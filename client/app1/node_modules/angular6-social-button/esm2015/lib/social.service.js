/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { FacebookLoginProvider } from "./providers/facebookProvider";
import { GoogleLoginProvider } from "./providers/googleProvider";
import * as i0 from "@angular/core";
/**
 * @record
 */
export function SocialServiceConfigItem() { }
/** @type {?} */
SocialServiceConfigItem.prototype.provider;
export class SocialServiceConfig {
    /**
     * @param {?=} providers
     */
    constructor(providers) {
        this.providers = new Map();
        if (providers) {
            for (let i = 0; i < providers.length; i++) {
                /** @type {?} */
                let element = providers[i];
                this.providers.set(element.provider.TYPE, element.provider);
            }
        }
    }
    /**
     * @return {?}
     */
    getProviders() {
        return this.providers;
    }
    /**
     * @param {?} provider
     * @return {?}
     */
    addProvider(provider) {
        if (!this.providers.get(provider.TYPE)) {
            this.providers.set(provider.TYPE, provider);
        }
    }
    /**
     * @param {?} clientId
     * @return {?}
     */
    addFacebook(clientId) {
        this.addProvider(new FacebookLoginProvider(clientId));
        return this;
    }
    /**
     * @param {?} clientId
     * @return {?}
     */
    addGoogle(clientId) {
        this.addProvider(new GoogleLoginProvider(clientId));
        return this;
    }
}
if (false) {
    /** @type {?} */
    SocialServiceConfig.prototype.providers;
}
export class SocialService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this._user = null;
        this._authState = new BehaviorSubject(null);
        this.providers = config.getProviders();
        this.providers.forEach((provider, key) => {
            provider.initialize().then((user) => {
                user.provider = key;
                this._user = user;
                this._authState.next(user);
            }).catch((err) => {
                // this._authState.next(null);
            });
        });
    }
    /**
     * @return {?}
     */
    get authState() {
        return this._authState.asObservable();
    }
    /**
     * @return {?}
     */
    isSocialLoggedIn() {
        console.log(this._user);
        return (this._user != null);
    }
    /**
     * @param {?=} share
     * @return {?}
     */
    facebookSharing(share) {
        return new Promise((resolve, reject) => {
            /** @type {?} */
            let providerObject = this.providers.get('facebook');
            if (providerObject) {
                providerObject.sharing(share).then(() => {
                    resolve(true);
                });
            }
            else {
                reject(SocialService.LOGIN_PROVIDER_NOT_FOUND);
            }
        });
    }
    /**
     * @param {?} providerType
     * @param {?=} scopes
     * @return {?}
     */
    signIn(providerType, scopes) {
        return new Promise((resolve, reject) => {
            /** @type {?} */
            let providerObject = this.providers.get(providerType);
            if (providerObject) {
                providerObject.signIn(scopes).then((user) => {
                    user.provider = providerType;
                    resolve(user);
                    this._user = user;
                    this._authState.next(user);
                }).catch((err) => {
                    reject(SocialService.USER_POPUP_CLOSE);
                });
            }
            else {
                reject(SocialService.LOGIN_PROVIDER_NOT_FOUND);
            }
        });
    }
    /**
     * @return {?}
     */
    signOut() {
        return new Promise((resolve, reject) => {
            if (this._user && this._user.provider) {
                /** @type {?} */
                let providerType = this._user.provider;
                /** @type {?} */
                let providerObject = this.providers.get(providerType);
                providerObject.signOut().then(() => {
                    this._user = null;
                    this._authState.next(null);
                    resolve();
                }).catch((err) => {
                    this._authState.next(null);
                });
            }
            else {
                reject(SocialService.LOGIN_PROVIDER_NOT_FOUND);
            }
        });
    }
}
SocialService.LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';
SocialService.USER_POPUP_CLOSE = 'User close the popup';
SocialService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
SocialService.ctorParameters = () => [
    { type: SocialServiceConfig }
];
/** @nocollapse */ SocialService.ngInjectableDef = i0.defineInjectable({ factory: function SocialService_Factory() { return new SocialService(i0.inject(SocialServiceConfig)); }, token: SocialService, providedIn: "root" });
if (false) {
    /** @type {?} */
    SocialService.LOGIN_PROVIDER_NOT_FOUND;
    /** @type {?} */
    SocialService.USER_POPUP_CLOSE;
    /** @type {?} */
    SocialService.prototype.providers;
    /** @type {?} */
    SocialService.prototype._user;
    /** @type {?} */
    SocialService.prototype._authState;
}

//# sourceMappingURL=data:application/json;base64,