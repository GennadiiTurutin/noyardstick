import { Injectable, NgModule, Component, Input, Output, EventEmitter, Inject, defineInjectable, inject } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { DOCUMENT } from '@angular/platform-browser';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class BaseLoginProviderImpl {
    constructor() { }
    /**
     * @param {?} obj
     * @param {?} onload
     * @return {?}
     */
    loadScript(obj, onload) {
        if (document.getElementById(obj.name)) {
            return;
        }
        /** @type {?} */
        let signInJS = document.createElement('script');
        signInJS.async = true;
        signInJS.src = obj.url;
        signInJS.onload = onload;
        if (obj.name === 'linkedin') {
            signInJS.async = false;
            signInJS.text = ('api_key: ' + obj.id).replace('\'', '');
        }
        document.head.appendChild(signInJS);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SocialUser {
}
class LoginProviderClass {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class FacebookLoginProvider extends BaseLoginProviderImpl {
    /**
     * @param {?} clientId
     */
    constructor(clientId) {
        super();
        this.clientId = clientId;
        this.TYPE = 'facebook';
        this.loginProviderObj = new LoginProviderClass();
        this.loginProviderObj.id = clientId;
        this.loginProviderObj.name = 'facebook';
        this.loginProviderObj.url = 'https://connect.facebook.net/en_US/sdk.js';
    }
    /**
     * @return {?}
     */
    initialize() {
        return new Promise((resolve, reject) => {
            this.loadScript(this.loginProviderObj, () => {
                FB.init({
                    appId: this.clientId,
                    autoLogAppEvents: true,
                    cookie: true,
                    xfbml: true,
                    version: 'v2.8'
                });
                FB.AppEvents.logPageView();
                FB.getLoginStatus(function (response) {
                    if (response.status === 'connected') {
                        /** @type {?} */
                        const accessToken = FB.getAuthResponse()['accessToken'];
                        FB.api('/me?fields=name,email,picture', (res) => {
                            resolve(FacebookLoginProvider.drawUser(Object.assign({}, { token: accessToken }, res)));
                        });
                    }
                });
            });
        });
    }
    /**
     * @param {?} response
     * @return {?}
     */
    static drawUser(response) {
        /** @type {?} */
        let user = new SocialUser();
        user.id = response.id;
        user.name = response.name;
        user.email = response.email;
        user.accessToken = response.accessToken;
        user.image = 'https://graph.facebook.com/' + response.id + '/picture?type=normal';
        return user;
    }
    /**
     * @param {?=} scopes
     * @return {?}
     */
    signIn(scopes) {
        return new Promise((resolve, reject) => {
            FB.login((response) => {
                console.log("facebook", response);
                if (response.authResponse) {
                    /** @type {?} */
                    const accessToken = FB.getAuthResponse()['accessToken'];
                    FB.api('/me?fields=name,email,picture', (res) => {
                        console.log("me", res);
                        resolve(FacebookLoginProvider.drawUser(Object.assign({}, { accessToken: accessToken }, res)));
                    });
                }
            }, { scope: scopes && scopes.length > 0 ? scopes.join(',') : 'email,public_profile' });
        });
    }
    /**
     * @param {?=} share
     * @return {?}
     */
    sharing(share) {
        return new Promise((resolve, reject) => {
            console.log("sharing", share);
            FB.ui({
                method: 'share',
                href: share.href,
                hashtag: (share.hashtag && share.hashtag.indexOf('#') >= 0) ? share.hashtag : null
            }, function (response) {
                console.log(response);
            });
        });
    }
    /**
     * @return {?}
     */
    signOut() {
        return new Promise((resolve, reject) => {
            FB.logout((response) => {
                resolve();
            });
        });
    }
}
FacebookLoginProvider.PROVIDER_TYPE = 'facebook';
FacebookLoginProvider.SCOPES = {
    EMAIL: 'email',
    PUBLIC_PROFILE: 'public_profile'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class GoogleLoginProvider extends BaseLoginProviderImpl {
    /**
     * @param {?} clientId
     */
    constructor(clientId) {
        super();
        this.clientId = clientId;
        this.loginProviderObj = new LoginProviderClass();
        this.TYPE = 'google';
        this.loginProviderObj.id = clientId;
        this.loginProviderObj.name = 'google';
        this.loginProviderObj.url = 'https://apis.google.com/js/platform.js';
    }
    /**
     * @return {?}
     */
    initialize() {
        return new Promise((resolve, reject) => {
            this.loadScript(this.loginProviderObj, () => {
                gapi.load('auth2', () => {
                    this.auth2 = gapi.auth2.init({
                        client_id: this.clientId,
                        scope: 'email'
                    });
                    this.auth2.then(() => {
                        if (this.auth2.isSignedIn.get()) {
                            resolve(this.drawUser());
                        }
                    });
                });
            });
        });
    }
    /**
     * @return {?}
     */
    drawUser() {
        /** @type {?} */
        let user = new SocialUser();
        /** @type {?} */
        let profile = this.auth2.currentUser.get().getBasicProfile();
        /** @type {?} */
        let authResponseObj = this.auth2.currentUser.get().getAuthResponse(true);
        user.id = profile.getId();
        user.name = profile.getName();
        user.email = profile.getEmail();
        user.image = profile.getImageUrl();
        user.accessToken = authResponseObj.access_token;
        user.idToken = authResponseObj.id_token;
        return user;
    }
    /**
     * @param {?=} scopes
     * @return {?}
     */
    signIn(scopes) {
        return new Promise((resolve, reject) => {
            /** @type {?} */
            let promise = this.auth2.signIn();
            promise.then(() => {
                resolve(this.drawUser());
            }).catch((err) => {
                reject(err);
            });
        });
    }
    /**
     * @return {?}
     */
    signOut() {
        return new Promise((resolve, reject) => {
            this.auth2.signOut().then((err) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
    /**
     * @param {?=} share
     * @return {?}
     */
    sharing(share) {
        return new Promise((resolve, reject) => {
            resolve();
        });
    }
}
GoogleLoginProvider.PROVIDER_TYPE = 'google';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SocialServiceConfig {
    /**
     * @param {?=} providers
     */
    constructor(providers) {
        this.providers = new Map();
        if (providers) {
            for (let i = 0; i < providers.length; i++) {
                /** @type {?} */
                let element = providers[i];
                this.providers.set(element.provider.TYPE, element.provider);
            }
        }
    }
    /**
     * @return {?}
     */
    getProviders() {
        return this.providers;
    }
    /**
     * @param {?} provider
     * @return {?}
     */
    addProvider(provider) {
        if (!this.providers.get(provider.TYPE)) {
            this.providers.set(provider.TYPE, provider);
        }
    }
    /**
     * @param {?} clientId
     * @return {?}
     */
    addFacebook(clientId) {
        this.addProvider(new FacebookLoginProvider(clientId));
        return this;
    }
    /**
     * @param {?} clientId
     * @return {?}
     */
    addGoogle(clientId) {
        this.addProvider(new GoogleLoginProvider(clientId));
        return this;
    }
}
class SocialService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this._user = null;
        this._authState = new BehaviorSubject(null);
        this.providers = config.getProviders();
        this.providers.forEach((provider, key) => {
            provider.initialize().then((user) => {
                user.provider = key;
                this._user = user;
                this._authState.next(user);
            }).catch((err) => {
                // this._authState.next(null);
            });
        });
    }
    /**
     * @return {?}
     */
    get authState() {
        return this._authState.asObservable();
    }
    /**
     * @return {?}
     */
    isSocialLoggedIn() {
        console.log(this._user);
        return (this._user != null);
    }
    /**
     * @param {?=} share
     * @return {?}
     */
    facebookSharing(share) {
        return new Promise((resolve, reject) => {
            /** @type {?} */
            let providerObject = this.providers.get('facebook');
            if (providerObject) {
                providerObject.sharing(share).then(() => {
                    resolve(true);
                });
            }
            else {
                reject(SocialService.LOGIN_PROVIDER_NOT_FOUND);
            }
        });
    }
    /**
     * @param {?} providerType
     * @param {?=} scopes
     * @return {?}
     */
    signIn(providerType, scopes) {
        return new Promise((resolve, reject) => {
            /** @type {?} */
            let providerObject = this.providers.get(providerType);
            if (providerObject) {
                providerObject.signIn(scopes).then((user) => {
                    user.provider = providerType;
                    resolve(user);
                    this._user = user;
                    this._authState.next(user);
                }).catch((err) => {
                    reject(SocialService.USER_POPUP_CLOSE);
                });
            }
            else {
                reject(SocialService.LOGIN_PROVIDER_NOT_FOUND);
            }
        });
    }
    /**
     * @return {?}
     */
    signOut() {
        return new Promise((resolve, reject) => {
            if (this._user && this._user.provider) {
                /** @type {?} */
                let providerType = this._user.provider;
                /** @type {?} */
                let providerObject = this.providers.get(providerType);
                providerObject.signOut().then(() => {
                    this._user = null;
                    this._authState.next(null);
                    resolve();
                }).catch((err) => {
                    this._authState.next(null);
                });
            }
            else {
                reject(SocialService.LOGIN_PROVIDER_NOT_FOUND);
            }
        });
    }
}
SocialService.LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';
SocialService.USER_POPUP_CLOSE = 'User close the popup';
SocialService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
SocialService.ctorParameters = () => [
    { type: SocialServiceConfig }
];
/** @nocollapse */ SocialService.ngInjectableDef = defineInjectable({ factory: function SocialService_Factory() { return new SocialService(inject(SocialServiceConfig)); }, token: SocialService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class FacebookLoginButton {
    /**
     * @param {?} socialAuthService
     */
    constructor(socialAuthService) {
        this.socialAuthService = socialAuthService;
        this.socialUser = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    socialSignIn() {
        this.socialAuthService.signIn('facebook', this.scopes).then((userData) => {
            console.log("socialSignIn", userData);
            this.socialUser.emit(userData);
        }).catch(() => {
            this.socialUser.emit(null);
        });
    }
}
FacebookLoginButton.decorators = [
    { type: Component, args: [{
                selector: 'facebook-login-button',
                template: `
      <button class="button btn-block loginBtn --facebook" 
              (click)="socialSignIn()" type="button">
          Login with Facebook</button>
  `,
                styles: [`.button{font-family:Lato,"Lucida Grande","Lucida Sans Unicode",Tahoma,Sans-Serif;-webkit-appearance:none;display:inline-block;outline:0;border-radius:3px;border:3px solid transparent;cursor:pointer;text-overflow:ellipsis;text-decoration:none!important;font-weight:400!important}.loginBtn{box-sizing:border-box;position:relative;margin:.2em;padding:0 15px 0 46px;border:none;text-align:left;line-height:34px;white-space:nowrap;border-radius:3px;font-size:16px;color:#fff}.loginBtn:before{content:"";box-sizing:border-box;position:absolute;top:0;left:0;width:34px;height:100%}.loginBtn:focus{outline:0}.loginBtn:active{box-shadow:inset 0 0 0 32px rgba(0,0,0,.1)}.shareBtn{box-sizing:border-box;position:relative;margin:.2em;padding:0 15px 0 46px;border:none;text-align:left;line-height:34px;white-space:nowrap;border-radius:3px;font-size:16px;color:#fff}.shareBtn:before{content:"";box-sizing:border-box;position:absolute;top:0;left:0;width:34px;height:100%}.shareBtn:focus{outline:0}.shareBtn:active{box-shadow:inset 0 0 0 32px rgba(0,0,0,.1)}.--facebook{background-color:#4c69ba;background-image:linear-gradient(#4c69ba,#3b55a0);text-shadow:0 -1px 0 #354c8c}.--facebook:before{border-right:1px solid #364e92;background:url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/14082/icon_facebook.png) 6px 6px no-repeat}.--facebook:focus,.--facebook:hover{background-color:#5b7bd5;background-image:linear-gradient(#5b7bd5,#4864b1)}.--google{background:#dd4b39}.--google:before{border-right:1px solid #bb3f30;background:url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/14082/icon_google.png) 6px 6px no-repeat}.--google:focus,.--google:hover{background:#e74b37}`],
            },] },
];
/** @nocollapse */
FacebookLoginButton.ctorParameters = () => [
    { type: SocialService }
];
FacebookLoginButton.propDecorators = {
    size: [{ type: Input }],
    scopes: [{ type: Input }],
    socialUser: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class GoogleLoginButton {
    /**
     * @param {?} socialAuthService
     */
    constructor(socialAuthService) {
        this.socialAuthService = socialAuthService;
        this.socialUser = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    socialSignIn() {
        this.socialAuthService.signIn('google', this.scopes).then((userData) => {
            this.socialUser.emit(userData);
        }).catch(() => {
            this.socialUser.emit(null);
        });
    }
}
GoogleLoginButton.decorators = [
    { type: Component, args: [{
                selector: 'google-login-button',
                template: `
      <button class="btn-block loginBtn --google" 
              (click)="socialSignIn()" type="button">
          Login with Google
      </button>
  `, styles: [`.button{font-family:Lato,"Lucida Grande","Lucida Sans Unicode",Tahoma,Sans-Serif;-webkit-appearance:none;display:inline-block;outline:0;border-radius:3px;border:3px solid transparent;cursor:pointer;text-overflow:ellipsis;text-decoration:none!important;font-weight:400!important}.loginBtn{box-sizing:border-box;position:relative;margin:.2em;padding:0 15px 0 46px;border:none;text-align:left;line-height:34px;white-space:nowrap;border-radius:3px;font-size:16px;color:#fff}.loginBtn:before{content:"";box-sizing:border-box;position:absolute;top:0;left:0;width:34px;height:100%}.loginBtn:focus{outline:0}.loginBtn:active{box-shadow:inset 0 0 0 32px rgba(0,0,0,.1)}.shareBtn{box-sizing:border-box;position:relative;margin:.2em;padding:0 15px 0 46px;border:none;text-align:left;line-height:34px;white-space:nowrap;border-radius:3px;font-size:16px;color:#fff}.shareBtn:before{content:"";box-sizing:border-box;position:absolute;top:0;left:0;width:34px;height:100%}.shareBtn:focus{outline:0}.shareBtn:active{box-shadow:inset 0 0 0 32px rgba(0,0,0,.1)}.--facebook{background-color:#4c69ba;background-image:linear-gradient(#4c69ba,#3b55a0);text-shadow:0 -1px 0 #354c8c}.--facebook:before{border-right:1px solid #364e92;background:url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/14082/icon_facebook.png) 6px 6px no-repeat}.--facebook:focus,.--facebook:hover{background-color:#5b7bd5;background-image:linear-gradient(#5b7bd5,#4864b1)}.--google{background:#dd4b39}.--google:before{border-right:1px solid #bb3f30;background:url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/14082/icon_google.png) 6px 6px no-repeat}.--google:focus,.--google:hover{background:#e74b37}`],
            },] },
];
/** @nocollapse */
GoogleLoginButton.ctorParameters = () => [
    { type: SocialService }
];
GoogleLoginButton.propDecorators = {
    size: [{ type: Input }],
    scopes: [{ type: Input }],
    socialUser: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class FacebookSharingButton {
    /**
     * @param {?} socialAuthService
     * @param {?} document
     */
    constructor(socialAuthService, document) {
        this.socialAuthService = socialAuthService;
        this.document = document;
        this.share = null;
        this.response = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    sharing() {
        console.log(this.document.location.href);
        if (!this.share) {
            this.share = { href: this.document.location.href };
        }
        else if (!this.share.href) {
            this.share.href = this.document.location.href;
        }
        this.socialAuthService.facebookSharing(this.share).then(() => {
            this.response.emit(true);
        }).catch((err) => {
            this.response.emit(false);
        });
    }
}
FacebookSharingButton.decorators = [
    { type: Component, args: [{
                selector: 'facebook-share-button',
                template: `
      <button class="button btn-block loginBtn --facebook" 
              (click)="sharing()" type="button">Share</button>
  `,
                styles: [`.button{font-family:Lato,"Lucida Grande","Lucida Sans Unicode",Tahoma,Sans-Serif;-webkit-appearance:none;display:inline-block;outline:0;border-radius:3px;border:3px solid transparent;cursor:pointer;text-overflow:ellipsis;text-decoration:none!important;font-weight:400!important}.loginBtn{box-sizing:border-box;position:relative;margin:.2em;padding:0 15px 0 46px;border:none;text-align:left;line-height:34px;white-space:nowrap;border-radius:3px;font-size:16px;color:#fff}.loginBtn:before{content:"";box-sizing:border-box;position:absolute;top:0;left:0;width:34px;height:100%}.loginBtn:focus{outline:0}.loginBtn:active{box-shadow:inset 0 0 0 32px rgba(0,0,0,.1)}.shareBtn{box-sizing:border-box;position:relative;margin:.2em;padding:0 15px 0 46px;border:none;text-align:left;line-height:34px;white-space:nowrap;border-radius:3px;font-size:16px;color:#fff}.shareBtn:before{content:"";box-sizing:border-box;position:absolute;top:0;left:0;width:34px;height:100%}.shareBtn:focus{outline:0}.shareBtn:active{box-shadow:inset 0 0 0 32px rgba(0,0,0,.1)}.--facebook{background-color:#4c69ba;background-image:linear-gradient(#4c69ba,#3b55a0);text-shadow:0 -1px 0 #354c8c}.--facebook:before{border-right:1px solid #364e92;background:url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/14082/icon_facebook.png) 6px 6px no-repeat}.--facebook:focus,.--facebook:hover{background-color:#5b7bd5;background-image:linear-gradient(#5b7bd5,#4864b1)}.--google{background:#dd4b39}.--google:before{border-right:1px solid #bb3f30;background:url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/14082/icon_google.png) 6px 6px no-repeat}.--google:focus,.--google:hover{background:#e74b37}`],
            },] },
];
/** @nocollapse */
FacebookSharingButton.ctorParameters = () => [
    { type: SocialService },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
FacebookSharingButton.propDecorators = {
    share: [{ type: Input }],
    response: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class Angular6SocialButtonModule {
}
Angular6SocialButtonModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [FacebookLoginButton, GoogleLoginButton, FacebookSharingButton],
                exports: [FacebookLoginButton, GoogleLoginButton, FacebookSharingButton]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { SocialServiceConfig, SocialService, FacebookLoginProvider, GoogleLoginProvider, FacebookLoginButton, GoogleLoginButton, FacebookSharingButton, Angular6SocialButtonModule, BaseLoginProviderImpl as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,