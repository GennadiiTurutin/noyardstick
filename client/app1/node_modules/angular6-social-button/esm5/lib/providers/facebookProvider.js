/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BaseLoginProviderImpl } from '../entities/baseLoginProviderImpl';
import { SocialUser, LoginProviderClass } from '../entities/user';
var FacebookLoginProvider = /** @class */ (function (_super) {
    tslib_1.__extends(FacebookLoginProvider, _super);
    function FacebookLoginProvider(clientId) {
        var _this = _super.call(this) || this;
        _this.clientId = clientId;
        _this.TYPE = 'facebook';
        _this.loginProviderObj = new LoginProviderClass();
        _this.loginProviderObj.id = clientId;
        _this.loginProviderObj.name = 'facebook';
        _this.loginProviderObj.url = 'https://connect.facebook.net/en_US/sdk.js';
        return _this;
    }
    /**
     * @return {?}
     */
    FacebookLoginProvider.prototype.initialize = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.loadScript(_this.loginProviderObj, function () {
                FB.init({
                    appId: _this.clientId,
                    autoLogAppEvents: true,
                    cookie: true,
                    xfbml: true,
                    version: 'v2.8'
                });
                FB.AppEvents.logPageView();
                FB.getLoginStatus(function (response) {
                    if (response.status === 'connected') {
                        /** @type {?} */
                        var accessToken_1 = FB.getAuthResponse()['accessToken'];
                        FB.api('/me?fields=name,email,picture', function (res) {
                            resolve(FacebookLoginProvider.drawUser(Object.assign({}, { token: accessToken_1 }, res)));
                        });
                    }
                });
            });
        });
    };
    /**
     * @param {?} response
     * @return {?}
     */
    FacebookLoginProvider.drawUser = /**
     * @param {?} response
     * @return {?}
     */
    function (response) {
        /** @type {?} */
        var user = new SocialUser();
        user.id = response.id;
        user.name = response.name;
        user.email = response.email;
        user.accessToken = response.accessToken;
        user.image = 'https://graph.facebook.com/' + response.id + '/picture?type=normal';
        return user;
    };
    /**
     * @param {?=} scopes
     * @return {?}
     */
    FacebookLoginProvider.prototype.signIn = /**
     * @param {?=} scopes
     * @return {?}
     */
    function (scopes) {
        return new Promise(function (resolve, reject) {
            FB.login(function (response) {
                console.log("facebook", response);
                if (response.authResponse) {
                    /** @type {?} */
                    var accessToken_2 = FB.getAuthResponse()['accessToken'];
                    FB.api('/me?fields=name,email,picture', function (res) {
                        console.log("me", res);
                        resolve(FacebookLoginProvider.drawUser(Object.assign({}, { accessToken: accessToken_2 }, res)));
                    });
                }
            }, { scope: scopes && scopes.length > 0 ? scopes.join(',') : 'email,public_profile' });
        });
    };
    /**
     * @param {?=} share
     * @return {?}
     */
    FacebookLoginProvider.prototype.sharing = /**
     * @param {?=} share
     * @return {?}
     */
    function (share) {
        return new Promise(function (resolve, reject) {
            console.log("sharing", share);
            FB.ui({
                method: 'share',
                href: share.href,
                hashtag: (share.hashtag && share.hashtag.indexOf('#') >= 0) ? share.hashtag : null
            }, function (response) {
                console.log(response);
            });
        });
    };
    /**
     * @return {?}
     */
    FacebookLoginProvider.prototype.signOut = /**
     * @return {?}
     */
    function () {
        return new Promise(function (resolve, reject) {
            FB.logout(function (response) {
                resolve();
            });
        });
    };
    FacebookLoginProvider.PROVIDER_TYPE = 'facebook';
    FacebookLoginProvider.SCOPES = {
        EMAIL: 'email',
        PUBLIC_PROFILE: 'public_profile'
    };
    return FacebookLoginProvider;
}(BaseLoginProviderImpl));
export { FacebookLoginProvider };
if (false) {
    /** @type {?} */
    FacebookLoginProvider.PROVIDER_TYPE;
    /** @type {?} */
    FacebookLoginProvider.SCOPES;
    /** @type {?} */
    FacebookLoginProvider.prototype.TYPE;
    /** @type {?} */
    FacebookLoginProvider.prototype.loginProviderObj;
    /** @type {?} */
    FacebookLoginProvider.prototype.clientId;
}

//# sourceMappingURL=data:application/json;base64,