/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { FacebookLoginProvider } from "./providers/facebookProvider";
import { GoogleLoginProvider } from "./providers/googleProvider";
import * as i0 from "@angular/core";
/**
 * @record
 */
export function SocialServiceConfigItem() { }
/** @type {?} */
SocialServiceConfigItem.prototype.provider;
var SocialServiceConfig = /** @class */ (function () {
    function SocialServiceConfig(providers) {
        this.providers = new Map();
        if (providers) {
            for (var i = 0; i < providers.length; i++) {
                /** @type {?} */
                var element = providers[i];
                this.providers.set(element.provider.TYPE, element.provider);
            }
        }
    }
    /**
     * @return {?}
     */
    SocialServiceConfig.prototype.getProviders = /**
     * @return {?}
     */
    function () {
        return this.providers;
    };
    /**
     * @param {?} provider
     * @return {?}
     */
    SocialServiceConfig.prototype.addProvider = /**
     * @param {?} provider
     * @return {?}
     */
    function (provider) {
        if (!this.providers.get(provider.TYPE)) {
            this.providers.set(provider.TYPE, provider);
        }
    };
    /**
     * @param {?} clientId
     * @return {?}
     */
    SocialServiceConfig.prototype.addFacebook = /**
     * @param {?} clientId
     * @return {?}
     */
    function (clientId) {
        this.addProvider(new FacebookLoginProvider(clientId));
        return this;
    };
    /**
     * @param {?} clientId
     * @return {?}
     */
    SocialServiceConfig.prototype.addGoogle = /**
     * @param {?} clientId
     * @return {?}
     */
    function (clientId) {
        this.addProvider(new GoogleLoginProvider(clientId));
        return this;
    };
    return SocialServiceConfig;
}());
export { SocialServiceConfig };
if (false) {
    /** @type {?} */
    SocialServiceConfig.prototype.providers;
}
var SocialService = /** @class */ (function () {
    function SocialService(config) {
        var _this = this;
        this._user = null;
        this._authState = new BehaviorSubject(null);
        this.providers = config.getProviders();
        this.providers.forEach(function (provider, key) {
            provider.initialize().then(function (user) {
                user.provider = key;
                _this._user = user;
                _this._authState.next(user);
            }).catch(function (err) {
                // this._authState.next(null);
            });
        });
    }
    Object.defineProperty(SocialService.prototype, "authState", {
        get: /**
         * @return {?}
         */
        function () {
            return this._authState.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SocialService.prototype.isSocialLoggedIn = /**
     * @return {?}
     */
    function () {
        console.log(this._user);
        return (this._user != null);
    };
    /**
     * @param {?=} share
     * @return {?}
     */
    SocialService.prototype.facebookSharing = /**
     * @param {?=} share
     * @return {?}
     */
    function (share) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            /** @type {?} */
            var providerObject = _this.providers.get('facebook');
            if (providerObject) {
                providerObject.sharing(share).then(function () {
                    resolve(true);
                });
            }
            else {
                reject(SocialService.LOGIN_PROVIDER_NOT_FOUND);
            }
        });
    };
    /**
     * @param {?} providerType
     * @param {?=} scopes
     * @return {?}
     */
    SocialService.prototype.signIn = /**
     * @param {?} providerType
     * @param {?=} scopes
     * @return {?}
     */
    function (providerType, scopes) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            /** @type {?} */
            var providerObject = _this.providers.get(providerType);
            if (providerObject) {
                providerObject.signIn(scopes).then(function (user) {
                    user.provider = providerType;
                    resolve(user);
                    _this._user = user;
                    _this._authState.next(user);
                }).catch(function (err) {
                    reject(SocialService.USER_POPUP_CLOSE);
                });
            }
            else {
                reject(SocialService.LOGIN_PROVIDER_NOT_FOUND);
            }
        });
    };
    /**
     * @return {?}
     */
    SocialService.prototype.signOut = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._user && _this._user.provider) {
                /** @type {?} */
                var providerType = _this._user.provider;
                /** @type {?} */
                var providerObject = _this.providers.get(providerType);
                providerObject.signOut().then(function () {
                    _this._user = null;
                    _this._authState.next(null);
                    resolve();
                }).catch(function (err) {
                    _this._authState.next(null);
                });
            }
            else {
                reject(SocialService.LOGIN_PROVIDER_NOT_FOUND);
            }
        });
    };
    SocialService.LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';
    SocialService.USER_POPUP_CLOSE = 'User close the popup';
    SocialService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    SocialService.ctorParameters = function () { return [
        { type: SocialServiceConfig }
    ]; };
    /** @nocollapse */ SocialService.ngInjectableDef = i0.defineInjectable({ factory: function SocialService_Factory() { return new SocialService(i0.inject(SocialServiceConfig)); }, token: SocialService, providedIn: "root" });
    return SocialService;
}());
export { SocialService };
if (false) {
    /** @type {?} */
    SocialService.LOGIN_PROVIDER_NOT_FOUND;
    /** @type {?} */
    SocialService.USER_POPUP_CLOSE;
    /** @type {?} */
    SocialService.prototype.providers;
    /** @type {?} */
    SocialService.prototype._user;
    /** @type {?} */
    SocialService.prototype._authState;
}

//# sourceMappingURL=data:application/json;base64,