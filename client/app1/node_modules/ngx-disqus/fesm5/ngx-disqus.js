import { InjectionToken, Injectable, Inject, Component, Input, Output, Renderer2, ElementRef, EventEmitter, ChangeDetectionStrategy, NgModule, defineInjectable, inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var DISQUS_SHORTNAME = new InjectionToken('DISQUS_SHORTNAME');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DisqusService = /** @class */ (function () {
    function DisqusService(shortname, _document) {
        this.shortname = shortname;
        this._document = _document;
    }
    Object.defineProperty(DisqusService.prototype, "DISQUS", {
        get: /**
         * @return {?}
         */
        function () {
            return this._document.defaultView.DISQUS;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisqusService.prototype, "disqus_config", {
        get: /**
         * @return {?}
         */
        function () {
            return this._document.defaultView.disqus_config;
        },
        set: /**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            this._document.defaultView.disqus_config = config;
        },
        enumerable: true,
        configurable: true
    });
    DisqusService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DisqusService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [DISQUS_SHORTNAME,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    /** @nocollapse */ DisqusService.ngInjectableDef = defineInjectable({ factory: function DisqusService_Factory() { return new DisqusService(inject(DISQUS_SHORTNAME), inject(DOCUMENT)); }, token: DisqusService, providedIn: "root" });
    return DisqusService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DisqusComponent = /** @class */ (function () {
    function DisqusComponent(renderer, el, dService) {
        this.renderer = renderer;
        this.el = el;
        this.dService = dService;
        /**
         * DISQUS events
         */
        this.newComment = new EventEmitter(true);
        this.ready = new EventEmitter(true);
        this.paginate = new EventEmitter(true);
    }
    /**
     * @return {?}
     */
    DisqusComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        /** Reset Disqus if any input changed */
        if (!this.dService.DISQUS) {
            this.addDisqusScript();
        }
        else {
            this.reset();
        }
    };
    /** Add DISQUS script */
    /**
     * Add DISQUS script
     * @return {?}
     */
    DisqusComponent.prototype.addDisqusScript = /**
     * Add DISQUS script
     * @return {?}
     */
    function () {
        /** Set DISQUS config */
        this.dService.disqus_config = this.getConfig();
        /** @type {?} */
        var disqusScript = this.renderer.createElement('script');
        disqusScript.src = "//" + this.dService.shortname + ".disqus.com/embed.js";
        disqusScript.async = true;
        disqusScript.type = 'text/javascript';
        this.renderer.setAttribute(disqusScript, 'data-timestamp', new Date().getTime().toString());
        this.renderer.appendChild(this.el.nativeElement, disqusScript);
    };
    /** Reset DISQUS with the new config */
    /**
     * Reset DISQUS with the new config
     * @return {?}
     */
    DisqusComponent.prototype.reset = /**
     * Reset DISQUS with the new config
     * @return {?}
     */
    function () {
        this.dService.DISQUS.reset({
            reload: true,
            config: this.getConfig()
        });
    };
    /** Create DISQUS config from the inputs */
    /**
     * Create DISQUS config from the inputs
     * @return {?}
     */
    DisqusComponent.prototype.getConfig = /**
     * Create DISQUS config from the inputs
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        return function () {
            this.page.identifier = self.identifier;
            this.page.url = self.validateUrl(self.url);
            this.page.title = self.title;
            this.category_id = self.category;
            this.language = self.language;
            /* Available callbacks are afterRender, onInit, onNewComment, onPaginate, onReady, preData, preInit, preReset */
            this.callbacks.onNewComment = [function (e) {
                    self.newComment.emit(e);
                }];
            this.callbacks.onReady = [function (e) {
                    self.ready.emit(e);
                }];
            this.callbacks.onPaginate = [function (e) {
                    self.paginate.emit(e);
                }];
        };
    };
    /**
     * @param {?} url
     * @return {?}
     */
    DisqusComponent.prototype.validateUrl = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** Validate URL input */
        if (url) {
            /** @type {?} */
            var r = /(http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
            if (r.test(url)) {
                return url;
            }
            else {
                console.warn('[Disqus]: Invalid URL');
            }
        }
        /** DISQUS will fallback to "Window.location.href" when URL is undefined */
        return undefined;
    };
    DisqusComponent.decorators = [
        { type: Component, args: [{
                    selector: 'disqus',
                    template: '<div id="disqus_thread"></div>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    DisqusComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: DisqusService }
    ]; };
    DisqusComponent.propDecorators = {
        url: [{ type: Input }],
        identifier: [{ type: Input }],
        title: [{ type: Input }],
        category: [{ type: Input }],
        language: [{ type: Input }],
        newComment: [{ type: Output }],
        ready: [{ type: Output }],
        paginate: [{ type: Output }]
    };
    return DisqusComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DisqusModule = /** @class */ (function () {
    function DisqusModule() {
    }
    /**
     * @param {?} shortname
     * @return {?}
     */
    DisqusModule.forRoot = /**
     * @param {?} shortname
     * @return {?}
     */
    function (shortname) {
        return {
            ngModule: DisqusModule,
            providers: [
                { provide: DISQUS_SHORTNAME, useValue: shortname }
            ]
        };
    };
    DisqusModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [DisqusComponent],
                    exports: [DisqusComponent]
                },] }
    ];
    return DisqusModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { DisqusModule, DISQUS_SHORTNAME, DisqusService, DisqusComponent as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,