/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { DISQUS_SHORTNAME } from './disqus.model';
import * as i0 from "@angular/core";
import * as i1 from "./disqus.model";
import * as i2 from "@angular/common";
export class DisqusService {
    /**
     * @param {?} shortname
     * @param {?} _document
     */
    constructor(shortname, _document) {
        this.shortname = shortname;
        this._document = _document;
    }
    /**
     * @return {?}
     */
    get DISQUS() {
        return this._document.defaultView.DISQUS;
    }
    /**
     * @return {?}
     */
    get disqus_config() {
        return this._document.defaultView.disqus_config;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    set disqus_config(config) {
        this._document.defaultView.disqus_config = config;
    }
}
DisqusService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
DisqusService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [DISQUS_SHORTNAME,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
/** @nocollapse */ DisqusService.ngInjectableDef = i0.defineInjectable({ factory: function DisqusService_Factory() { return new DisqusService(i0.inject(i1.DISQUS_SHORTNAME), i0.inject(i2.DOCUMENT)); }, token: DisqusService, providedIn: "root" });
if (false) {
    /** @type {?} */
    DisqusService.prototype.shortname;
    /** @type {?} */
    DisqusService.prototype._document;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcXVzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZGlzcXVzLyIsInNvdXJjZXMiOlsibGliL2Rpc3F1cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFLbEQsTUFBTSxPQUFPLGFBQWE7Ozs7O0lBY3hCLFlBQThDLFNBQWlCLEVBQTRCLFNBQWM7UUFBM0QsY0FBUyxHQUFULFNBQVMsQ0FBUTtRQUE0QixjQUFTLEdBQVQsU0FBUyxDQUFLO0tBQ3hHOzs7O0lBYkQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUM7S0FDMUM7Ozs7SUFFRCxJQUFJLGFBQWE7UUFDZixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQztLQUNqRDs7Ozs7SUFFRCxJQUFJLGFBQWEsQ0FBQyxNQUFXO1FBQzNCLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7S0FDbkQ7OztZQWZGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozt5Q0FlZSxNQUFNLFNBQUMsZ0JBQWdCOzRDQUE2QixNQUFNLFNBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IERJU1FVU19TSE9SVE5BTUUgfSBmcm9tICcuL2Rpc3F1cy5tb2RlbCc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEaXNxdXNTZXJ2aWNlIHtcclxuXHJcbiAgZ2V0IERJU1FVUygpOiBhbnkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RvY3VtZW50LmRlZmF1bHRWaWV3LkRJU1FVUztcclxuICB9XHJcblxyXG4gIGdldCBkaXNxdXNfY29uZmlnKCk6IGFueSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZG9jdW1lbnQuZGVmYXVsdFZpZXcuZGlzcXVzX2NvbmZpZztcclxuICB9XHJcblxyXG4gIHNldCBkaXNxdXNfY29uZmlnKGNvbmZpZzogYW55KSB7XHJcbiAgICB0aGlzLl9kb2N1bWVudC5kZWZhdWx0Vmlldy5kaXNxdXNfY29uZmlnID0gY29uZmlnO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoIEBJbmplY3QoRElTUVVTX1NIT1JUTkFNRSkgcHVibGljIHNob3J0bmFtZTogc3RyaW5nLCBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIF9kb2N1bWVudDogYW55KSB7XHJcbiAgfVxyXG59XHJcblxyXG4iXX0=