{"version":3,"sources":["ng://ngx-disqus/lib/disqus.model.ts","ng://ngx-disqus/lib/disqus.service.ts","ng://ngx-disqus/lib/disqus.component.ts","ng://ngx-disqus/lib/disqus.module.ts"],"names":["DISQUS_SHORTNAME","InjectionToken","DisqusService","shortname","_document","this","Object","defineProperty","prototype","defaultView","DISQUS","disqus_config","config","Injectable","args","providedIn","Inject","DOCUMENT","DisqusComponent","renderer","el","dService","newComment","EventEmitter","ready","paginate","ngOnChanges","reset","addDisqusScript","getConfig","disqusScript","createElement","src","async","type","setAttribute","Date","getTime","toString","appendChild","nativeElement","reload","self","page","identifier","url","validateUrl","title","category_id","category","language","callbacks","onNewComment","e","emit","onReady","onPaginate","test","console","warn","undefined","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","Renderer2","ElementRef","Input","Output","DisqusModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport const DISQUS_SHORTNAME = new InjectionToken<string>('DISQUS_SHORTNAME');\r\n\r\nexport interface DisqusComment {\r\n  id: number;\r\n  name: string;\r\n}\r\nexport interface DisqusReady {\r\n  height: number;\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { DISQUS_SHORTNAME } from './disqus.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DisqusService {\r\n\r\n  get DISQUS(): any {\r\n    return this._document.defaultView.DISQUS;\r\n  }\r\n\r\n  get disqus_config(): any {\r\n    return this._document.defaultView.disqus_config;\r\n  }\r\n\r\n  set disqus_config(config: any) {\r\n    this._document.defaultView.disqus_config = config;\r\n  }\r\n\r\n  constructor( @Inject(DISQUS_SHORTNAME) public shortname: string, @Inject(DOCUMENT) private _document: any) {\r\n  }\r\n}\r\n\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  OnChanges,\r\n  Renderer2,\r\n  ElementRef,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { DisqusService } from './disqus.service';\r\nimport { DisqusComment, DisqusReady } from './disqus.model';\r\n\r\n@Component({\r\n  selector: 'disqus',\r\n  template: '<div id=\"disqus_thread\"></div>',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class DisqusComponent implements OnChanges {\r\n\r\n  /** DISQUS options */\r\n  @Input() url: string;\r\n  @Input() identifier: string;\r\n  @Input() title: string;\r\n  @Input() category: string;\r\n  @Input() language: string;\r\n\r\n  /** DISQUS events */\r\n  @Output() newComment = new EventEmitter<DisqusComment>(true);\r\n  @Output() ready = new EventEmitter<DisqusReady>(true);\r\n  @Output() paginate = new EventEmitter<any>(true);\r\n\r\n  constructor(private renderer: Renderer2, private el: ElementRef, private dService: DisqusService) {\r\n   }\r\n\r\n  ngOnChanges() {\r\n    /** Reset Disqus if any input changed */\r\n\r\n    if (!this.dService.DISQUS) {\r\n      this.addDisqusScript();\r\n    } else {\r\n      this.reset();\r\n    }\r\n  }\r\n\r\n  /** Add DISQUS script */\r\n  addDisqusScript() {\r\n\r\n    /** Set DISQUS config */\r\n    this.dService.disqus_config = this.getConfig();\r\n\r\n    const disqusScript = this.renderer.createElement('script');\r\n    disqusScript.src = `//${this.dService.shortname}.disqus.com/embed.js`;\r\n    disqusScript.async = true;\r\n    disqusScript.type = 'text/javascript';\r\n    this.renderer.setAttribute(disqusScript, 'data-timestamp', new Date().getTime().toString());\r\n    this.renderer.appendChild(this.el.nativeElement, disqusScript);\r\n  }\r\n\r\n  /** Reset DISQUS with the new config */\r\n  reset() {\r\n    this.dService.DISQUS.reset({\r\n      reload: true,\r\n      config: this.getConfig()\r\n    });\r\n  }\r\n\r\n  /** Create DISQUS config from the inputs */\r\n  getConfig() {\r\n    const self = this;\r\n    return function () {\r\n      this.page.identifier = self.identifier;\r\n      this.page.url = self.validateUrl(self.url);\r\n      this.page.title = self.title;\r\n      this.category_id = self.category;\r\n      this.language = self.language;\r\n\r\n      /* Available callbacks are afterRender, onInit, onNewComment, onPaginate, onReady, preData, preInit, preReset */\r\n      this.callbacks.onNewComment = [(e) => {\r\n        self.newComment.emit(e);\r\n      }];\r\n\r\n      this.callbacks.onReady = [(e) => {\r\n        self.ready.emit(e);\r\n      }];\r\n\r\n      this.callbacks.onPaginate = [(e) => {\r\n        self.paginate.emit(e);\r\n      }];\r\n    };\r\n  }\r\n\r\n  validateUrl(url: string) {\r\n    /** Validate URL input */\r\n    if (url) {\r\n      const r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\r\n\r\n      if (r.test(url)) {\r\n        return url;\r\n      } else {\r\n        console.warn('[Disqus]: Invalid URL');\r\n      }\r\n    }\r\n    /** DISQUS will fallback to \"Window.location.href\" when URL is undefined */\r\n    return undefined;\r\n  }\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { DisqusComponent } from './disqus.component';\r\nimport { DISQUS_SHORTNAME } from './disqus.model';\r\n\r\n@NgModule({\r\n  declarations: [DisqusComponent],\r\n  exports: [DisqusComponent]\r\n})\r\nexport class DisqusModule {\r\n  static forRoot(shortname: string): ModuleWithProviders {\r\n    return {\r\n      ngModule: DisqusModule,\r\n      providers: [\r\n        { provide: DISQUS_SHORTNAME, useValue: shortname }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}