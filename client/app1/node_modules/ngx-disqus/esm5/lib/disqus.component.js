/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, Renderer2, ElementRef, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { DisqusService } from './disqus.service';
var DisqusComponent = /** @class */ (function () {
    function DisqusComponent(renderer, el, dService) {
        this.renderer = renderer;
        this.el = el;
        this.dService = dService;
        /**
         * DISQUS events
         */
        this.newComment = new EventEmitter(true);
        this.ready = new EventEmitter(true);
        this.paginate = new EventEmitter(true);
    }
    /**
     * @return {?}
     */
    DisqusComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        /** Reset Disqus if any input changed */
        if (!this.dService.DISQUS) {
            this.addDisqusScript();
        }
        else {
            this.reset();
        }
    };
    /** Add DISQUS script */
    /**
     * Add DISQUS script
     * @return {?}
     */
    DisqusComponent.prototype.addDisqusScript = /**
     * Add DISQUS script
     * @return {?}
     */
    function () {
        /** Set DISQUS config */
        this.dService.disqus_config = this.getConfig();
        /** @type {?} */
        var disqusScript = this.renderer.createElement('script');
        disqusScript.src = "//" + this.dService.shortname + ".disqus.com/embed.js";
        disqusScript.async = true;
        disqusScript.type = 'text/javascript';
        this.renderer.setAttribute(disqusScript, 'data-timestamp', new Date().getTime().toString());
        this.renderer.appendChild(this.el.nativeElement, disqusScript);
    };
    /** Reset DISQUS with the new config */
    /**
     * Reset DISQUS with the new config
     * @return {?}
     */
    DisqusComponent.prototype.reset = /**
     * Reset DISQUS with the new config
     * @return {?}
     */
    function () {
        this.dService.DISQUS.reset({
            reload: true,
            config: this.getConfig()
        });
    };
    /** Create DISQUS config from the inputs */
    /**
     * Create DISQUS config from the inputs
     * @return {?}
     */
    DisqusComponent.prototype.getConfig = /**
     * Create DISQUS config from the inputs
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        return function () {
            this.page.identifier = self.identifier;
            this.page.url = self.validateUrl(self.url);
            this.page.title = self.title;
            this.category_id = self.category;
            this.language = self.language;
            /* Available callbacks are afterRender, onInit, onNewComment, onPaginate, onReady, preData, preInit, preReset */
            this.callbacks.onNewComment = [function (e) {
                    self.newComment.emit(e);
                }];
            this.callbacks.onReady = [function (e) {
                    self.ready.emit(e);
                }];
            this.callbacks.onPaginate = [function (e) {
                    self.paginate.emit(e);
                }];
        };
    };
    /**
     * @param {?} url
     * @return {?}
     */
    DisqusComponent.prototype.validateUrl = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** Validate URL input */
        if (url) {
            /** @type {?} */
            var r = /(http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
            if (r.test(url)) {
                return url;
            }
            else {
                console.warn('[Disqus]: Invalid URL');
            }
        }
        /** DISQUS will fallback to "Window.location.href" when URL is undefined */
        return undefined;
    };
    DisqusComponent.decorators = [
        { type: Component, args: [{
                    selector: 'disqus',
                    template: '<div id="disqus_thread"></div>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    DisqusComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: DisqusService }
    ]; };
    DisqusComponent.propDecorators = {
        url: [{ type: Input }],
        identifier: [{ type: Input }],
        title: [{ type: Input }],
        category: [{ type: Input }],
        language: [{ type: Input }],
        newComment: [{ type: Output }],
        ready: [{ type: Output }],
        paginate: [{ type: Output }]
    };
    return DisqusComponent;
}());
export { DisqusComponent };
if (false) {
    /**
     * DISQUS options
     * @type {?}
     */
    DisqusComponent.prototype.url;
    /** @type {?} */
    DisqusComponent.prototype.identifier;
    /** @type {?} */
    DisqusComponent.prototype.title;
    /** @type {?} */
    DisqusComponent.prototype.category;
    /** @type {?} */
    DisqusComponent.prototype.language;
    /**
     * DISQUS events
     * @type {?}
     */
    DisqusComponent.prototype.newComment;
    /** @type {?} */
    DisqusComponent.prototype.ready;
    /** @type {?} */
    DisqusComponent.prototype.paginate;
    /** @type {?} */
    DisqusComponent.prototype.renderer;
    /** @type {?} */
    DisqusComponent.prototype.el;
    /** @type {?} */
    DisqusComponent.prototype.dService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcXVzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1kaXNxdXMvIiwic291cmNlcyI6WyJsaWIvZGlzcXVzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUVOLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLHVCQUF1QixFQUN4QixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0lBdUIvQyx5QkFBb0IsUUFBbUIsRUFBVSxFQUFjLEVBQVUsUUFBdUI7UUFBNUUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFVLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFlOzs7O1FBSmhHLGtCQUF1QixJQUFJLFlBQVksQ0FBZ0IsSUFBSSxDQUFDLENBQUM7UUFDN0QsYUFBa0IsSUFBSSxZQUFZLENBQWMsSUFBSSxDQUFDLENBQUM7UUFDdEQsZ0JBQXFCLElBQUksWUFBWSxDQUFNLElBQUksQ0FBQyxDQUFDO0tBRy9DOzs7O0lBRUYscUNBQVc7OztJQUFYOztRQUdFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtZQUN6QixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDeEI7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNkO0tBQ0Y7SUFFRCx3QkFBd0I7Ozs7O0lBQ3hCLHlDQUFlOzs7O0lBQWY7O1FBR0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDOztRQUUvQyxJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzRCxZQUFZLENBQUMsR0FBRyxHQUFHLE9BQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLHlCQUFzQixDQUFDO1FBQ3RFLFlBQVksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQzFCLFlBQVksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLGdCQUFnQixFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUM1RixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztLQUNoRTtJQUVELHVDQUF1Qzs7Ozs7SUFDdkMsK0JBQUs7Ozs7SUFBTDtRQUNFLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUN6QixNQUFNLEVBQUUsSUFBSTtZQUNaLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFO1NBQ3pCLENBQUMsQ0FBQztLQUNKO0lBRUQsMkNBQTJDOzs7OztJQUMzQyxtQ0FBUzs7OztJQUFUOztRQUNFLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixPQUFPO1lBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQzdCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7O1lBRzlCLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxHQUFHLENBQUMsVUFBQyxDQUFDO29CQUMvQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDekIsQ0FBQyxDQUFDO1lBRUgsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxVQUFDLENBQUM7b0JBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNwQixDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxDQUFDLFVBQUMsQ0FBQztvQkFDN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3ZCLENBQUMsQ0FBQztTQUNKLENBQUM7S0FDSDs7Ozs7SUFFRCxxQ0FBVzs7OztJQUFYLFVBQVksR0FBVzs7UUFFckIsSUFBSSxHQUFHLEVBQUU7O1lBQ1AsSUFBTSxDQUFDLEdBQUcsK0VBQStFLENBQUM7WUFFMUYsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNmLE9BQU8sR0FBRyxDQUFDO2FBQ1o7aUJBQU07Z0JBQ0wsT0FBTyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO2FBQ3ZDO1NBQ0Y7O1FBRUQsT0FBTyxTQUFTLENBQUM7S0FDbEI7O2dCQTdGRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFFBQVE7b0JBQ2xCLFFBQVEsRUFBRSxnQ0FBZ0M7b0JBQzFDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNoRDs7OztnQkFaQyxTQUFTO2dCQUNULFVBQVU7Z0JBSUgsYUFBYTs7O3NCQVluQixLQUFLOzZCQUNMLEtBQUs7d0JBQ0wsS0FBSzsyQkFDTCxLQUFLOzJCQUNMLEtBQUs7NkJBR0wsTUFBTTt3QkFDTixNQUFNOzJCQUNOLE1BQU07OzBCQS9CVDs7U0FtQmEsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50LFxyXG4gIElucHV0LFxyXG4gIE91dHB1dCxcclxuICBPbkNoYW5nZXMsXHJcbiAgUmVuZGVyZXIyLFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5XHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERpc3F1c1NlcnZpY2UgfSBmcm9tICcuL2Rpc3F1cy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRGlzcXVzQ29tbWVudCwgRGlzcXVzUmVhZHkgfSBmcm9tICcuL2Rpc3F1cy5tb2RlbCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2Rpc3F1cycsXHJcbiAgdGVtcGxhdGU6ICc8ZGl2IGlkPVwiZGlzcXVzX3RocmVhZFwiPjwvZGl2PicsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBEaXNxdXNDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG5cclxuICAvKiogRElTUVVTIG9wdGlvbnMgKi9cclxuICBASW5wdXQoKSB1cmw6IHN0cmluZztcclxuICBASW5wdXQoKSBpZGVudGlmaWVyOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgdGl0bGU6IHN0cmluZztcclxuICBASW5wdXQoKSBjYXRlZ29yeTogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGxhbmd1YWdlOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBESVNRVVMgZXZlbnRzICovXHJcbiAgQE91dHB1dCgpIG5ld0NvbW1lbnQgPSBuZXcgRXZlbnRFbWl0dGVyPERpc3F1c0NvbW1lbnQ+KHRydWUpO1xyXG4gIEBPdXRwdXQoKSByZWFkeSA9IG5ldyBFdmVudEVtaXR0ZXI8RGlzcXVzUmVhZHk+KHRydWUpO1xyXG4gIEBPdXRwdXQoKSBwYWdpbmF0ZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55Pih0cnVlKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLCBwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIGRTZXJ2aWNlOiBEaXNxdXNTZXJ2aWNlKSB7XHJcbiAgIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoKSB7XHJcbiAgICAvKiogUmVzZXQgRGlzcXVzIGlmIGFueSBpbnB1dCBjaGFuZ2VkICovXHJcblxyXG4gICAgaWYgKCF0aGlzLmRTZXJ2aWNlLkRJU1FVUykge1xyXG4gICAgICB0aGlzLmFkZERpc3F1c1NjcmlwdCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqIEFkZCBESVNRVVMgc2NyaXB0ICovXHJcbiAgYWRkRGlzcXVzU2NyaXB0KCkge1xyXG5cclxuICAgIC8qKiBTZXQgRElTUVVTIGNvbmZpZyAqL1xyXG4gICAgdGhpcy5kU2VydmljZS5kaXNxdXNfY29uZmlnID0gdGhpcy5nZXRDb25maWcoKTtcclxuXHJcbiAgICBjb25zdCBkaXNxdXNTY3JpcHQgPSB0aGlzLnJlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgZGlzcXVzU2NyaXB0LnNyYyA9IGAvLyR7dGhpcy5kU2VydmljZS5zaG9ydG5hbWV9LmRpc3F1cy5jb20vZW1iZWQuanNgO1xyXG4gICAgZGlzcXVzU2NyaXB0LmFzeW5jID0gdHJ1ZTtcclxuICAgIGRpc3F1c1NjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShkaXNxdXNTY3JpcHQsICdkYXRhLXRpbWVzdGFtcCcsIG5ldyBEYXRlKCkuZ2V0VGltZSgpLnRvU3RyaW5nKCkpO1xyXG4gICAgdGhpcy5yZW5kZXJlci5hcHBlbmRDaGlsZCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIGRpc3F1c1NjcmlwdCk7XHJcbiAgfVxyXG5cclxuICAvKiogUmVzZXQgRElTUVVTIHdpdGggdGhlIG5ldyBjb25maWcgKi9cclxuICByZXNldCgpIHtcclxuICAgIHRoaXMuZFNlcnZpY2UuRElTUVVTLnJlc2V0KHtcclxuICAgICAgcmVsb2FkOiB0cnVlLFxyXG4gICAgICBjb25maWc6IHRoaXMuZ2V0Q29uZmlnKClcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqIENyZWF0ZSBESVNRVVMgY29uZmlnIGZyb20gdGhlIGlucHV0cyAqL1xyXG4gIGdldENvbmZpZygpIHtcclxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgdGhpcy5wYWdlLmlkZW50aWZpZXIgPSBzZWxmLmlkZW50aWZpZXI7XHJcbiAgICAgIHRoaXMucGFnZS51cmwgPSBzZWxmLnZhbGlkYXRlVXJsKHNlbGYudXJsKTtcclxuICAgICAgdGhpcy5wYWdlLnRpdGxlID0gc2VsZi50aXRsZTtcclxuICAgICAgdGhpcy5jYXRlZ29yeV9pZCA9IHNlbGYuY2F0ZWdvcnk7XHJcbiAgICAgIHRoaXMubGFuZ3VhZ2UgPSBzZWxmLmxhbmd1YWdlO1xyXG5cclxuICAgICAgLyogQXZhaWxhYmxlIGNhbGxiYWNrcyBhcmUgYWZ0ZXJSZW5kZXIsIG9uSW5pdCwgb25OZXdDb21tZW50LCBvblBhZ2luYXRlLCBvblJlYWR5LCBwcmVEYXRhLCBwcmVJbml0LCBwcmVSZXNldCAqL1xyXG4gICAgICB0aGlzLmNhbGxiYWNrcy5vbk5ld0NvbW1lbnQgPSBbKGUpID0+IHtcclxuICAgICAgICBzZWxmLm5ld0NvbW1lbnQuZW1pdChlKTtcclxuICAgICAgfV07XHJcblxyXG4gICAgICB0aGlzLmNhbGxiYWNrcy5vblJlYWR5ID0gWyhlKSA9PiB7XHJcbiAgICAgICAgc2VsZi5yZWFkeS5lbWl0KGUpO1xyXG4gICAgICB9XTtcclxuXHJcbiAgICAgIHRoaXMuY2FsbGJhY2tzLm9uUGFnaW5hdGUgPSBbKGUpID0+IHtcclxuICAgICAgICBzZWxmLnBhZ2luYXRlLmVtaXQoZSk7XHJcbiAgICAgIH1dO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHZhbGlkYXRlVXJsKHVybDogc3RyaW5nKSB7XHJcbiAgICAvKiogVmFsaWRhdGUgVVJMIGlucHV0ICovXHJcbiAgICBpZiAodXJsKSB7XHJcbiAgICAgIGNvbnN0IHIgPSAvKGh0dHB8aHR0cHMpOlxcL1xcLyhcXHcrOnswLDF9XFx3KkApPyhcXFMrKSg6WzAtOV0rKT8oXFwvfFxcLyhbXFx3IyE6Lj8rPSYlQCFcXC1cXC9dKSk/LztcclxuXHJcbiAgICAgIGlmIChyLnRlc3QodXJsKSkge1xyXG4gICAgICAgIHJldHVybiB1cmw7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdbRGlzcXVzXTogSW52YWxpZCBVUkwnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqIERJU1FVUyB3aWxsIGZhbGxiYWNrIHRvIFwiV2luZG93LmxvY2F0aW9uLmhyZWZcIiB3aGVuIFVSTCBpcyB1bmRlZmluZWQgKi9cclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=